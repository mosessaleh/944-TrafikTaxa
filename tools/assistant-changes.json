{
  "description": "Fix Prisma schema: add VehicleType & FavoriteAddress, wire Ride.vehicleTypeId, correct enums formatting.",
  "files": [
    {
      "path": "prisma/schema.prisma",
      "content": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// === Enums ===\n\nenum Role {\n  USER\n  ADMIN\n}\n\nenum RideStatus {\n  PENDING\n  CONFIRMED\n  DISPATCHED\n  ONGOING\n  COMPLETED\n  CANCELED\n}\n\nenum VehicleKey {\n  SEDAN5\n  SEVEN_NO_BAG\n  VAN\n  LIMO\n}\n\n// === Models ===\n\nmodel User {\n  id                  Int       @id @default(autoincrement())\n  email               String    @unique\n  hashedPassword      String\n  firstName           String\n  lastName            String\n  phone               String\n  street              String\n  houseNumber         String\n  postalCode          String\n  city                String\n  role                Role      @default(USER)\n  emailVerified       Boolean   @default(false)\n  emailVerifyCode     String?\n  emailVerifyExpires  DateTime?\n  pendingEmail        String?\n  pendingEmailCode    String?\n  pendingEmailExpires DateTime?\n  resetToken          String?\n  resetExpires        DateTime?\n  createdAt           DateTime  @default(now())\n\n  rides               Ride[]\n  favorites           FavoriteAddress[]\n}\n\nmodel VehicleType {\n  id         Int         @id @default(autoincrement())\n  key        VehicleKey  @unique\n  title      String\n  capacity   Int         @default(4)\n  active     Boolean     @default(true)\n  // multiplier يضاعف السعر الأساسي (حسب قواعد النهار/الليل)\n  multiplier Float       @default(1.0)\n  note       String?\n\n  rides      Ride[]\n}\n\nmodel FavoriteAddress {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  label     String\n  address   String\n  lat       Float?\n  lon       Float?\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n}\n\nmodel Ride {\n  id            Int         @id @default(autoincrement())\n  user          User        @relation(fields: [userId], references: [id])\n  userId        Int\n  riderName     String\n  passengers    Int         @default(1)\n  pickupAddress String\n  dropoffAddress String\n  scheduled     Boolean     @default(false)\n  pickupTime    DateTime\n  distanceKm    Float?\n  durationMin   Int?\n  price         Int\n  status        RideStatus  @default(PENDING)\n  paid          Boolean     @default(false)\n  createdAt     DateTime    @default(now())\n\n  vehicleType    VehicleType @relation(fields: [vehicleTypeId], references: [id])\n  vehicleTypeId  Int\n\n  @@index([userId])\n  @@index([vehicleTypeId])\n}\n"
    },
    {
      "path": "lib/price.ts",
      "content": "import { prisma } from '@/lib/db';\n\nfunction isHoliday(at: Date){\n  const list = (process.env.HOLIDAYS||'').split(',').map(s=> s.trim()).filter(Boolean);\n  const ymd = at.toISOString().slice(0,10);\n  return list.includes(ymd);\n}\n\nexport async function computeBase(distanceKm:number, durationMin:number, at: Date){\n  const hour = at.getHours();\n  const isNight = (hour < 6 || hour >= 18) || isHoliday(at);\n  const start = isNight ? 60 : 40;\n  const perKm = isNight ? 16 : 12.75;\n  const perMin = isNight ? 7 : 5.75;\n  const price = Math.max(0, start + perKm * distanceKm + perMin * durationMin);\n  return Math.round(price);\n}\n\nexport async function computePrice(distanceKm:number, durationMin:number, at: Date, vehicleTypeId?: number){\n  const base = await computeBase(distanceKm, durationMin, at);\n  if (!vehicleTypeId) return base;\n  const vt = await prisma.vehicleType.findUnique({ where: { id: vehicleTypeId }, select: { active: true, multiplier: true } });\n  if (!vt || !vt.active) throw new Error('Vehicle type not available');\n  const mul = Number(vt.multiplier || 1);\n  return Math.round(base * (mul > 0 ? mul : 1));\n}\n"
    }
  ]
}
