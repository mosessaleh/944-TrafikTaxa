{
  "description": "Add public /api/crypto/available route to fix 404 for BookingPayModal.",
  "files": [
    {
      "path": "app/api/crypto/available/route.ts",
      "content": "import { NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/db\";\n\n/**\n * Public endpoint: list available crypto symbols for checkout.\n * Tries DB (CryptoWallet with isActive=true). Falls back to a static set if DB isn't ready.\n * Response shape: { symbols: [{ symbol, total, active }...] }\n */\nexport async function GET() {\n  try {\n    const wallets = await prisma.cryptoWallet.findMany({\n      where: { isActive: true },\n      select: { symbol: true, isActive: true },\n    });\n    const map = new Map<string, { total: number; active: number }>();\n    for (const w of wallets) {\n      const key = String(w.symbol || \"\").toLowerCase();\n      const rec = map.get(key) || { total: 0, active: 0 };\n      rec.total += 1;\n      if (w.isActive) rec.active += 1;\n      map.set(key, rec);\n    }\n    const symbols = Array.from(map.entries()).map(([symbol, v]) => ({\n      symbol,\n      total: v.total,\n      active: v.active,\n    }));\n    return NextResponse.json({ symbols, source: \"db\" });\n  } catch (_e) {\n    // Fallback: common coins so UI doesn't break even if DB model isn't present\n    const defaults = [\"pi\",\"btc\",\"eth\",\"usdt\",\"usdc\",\"bnb\",\"xrp\"].map(s => ({\n      symbol: s, total: 1, active: 1\n    }));\n    return NextResponse.json({ symbols: defaults, source: \"fallback\" });\n  }\n}\n"
    },
    {
      "path": "app/DEV_NOTES__assistant.md",
      "content_update": "regex",
      "updates": [
        {
          "pattern": "$",
          "replacement": "\n[2025-10-24 06:26:58] Added /api/crypto/available (public) to satisfy BookingPayModal; DB-first with graceful fallback.\n"
        }
      ]
    }
  ]
}