{
  "description": "Allow Danish/Unicode letters in registration (street/name) + Unicode-safe sanitization.",
  "files": [
    {
      "path": "lib/validation.ts",
      "content": "import { z } from 'zod';\n\n// Unicode-aware regexes (Danish letters, accents, combinations)\nexport const nameRegex = /^[\\p{L}\\p{M}\\s\\-'.]+$/u;\nexport const addressRegex = /^[\\p{L}\\p{M}0-9\\s,\\.\\-#&()\\/'’]+$/u;\nexport const houseNumberRegex = /^[0-9\\p{L}\\p{M}\\s\\/\\-.]+$/u;\n\n// Optional: a ready-to-use schema (use it in your route if desired)\nexport const RegisterSchema = z.object({\n  firstName: z.string().min(2).regex(nameRegex, 'First name contains invalid characters'),\n  lastName: z.string().min(2).regex(nameRegex, 'Last name contains invalid characters'),\n  street: z.string().min(3).regex(addressRegex, 'Street contains invalid characters'),\n  houseNumber: z.string().min(1).regex(houseNumberRegex, 'House number contains invalid characters').optional(),\n  city: z.string().min(2).regex(nameRegex, 'City contains invalid characters'),\n  postcode: z.string().min(2).max(10),\n  email: z.string().email(),\n  password: z.string().min(8)\n});\n"
    },
    {
      "path": "lib/sanitize.ts",
      "content": "// Unicode-safe sanitizers so Danish letters aren\\'t stripped\nexport function sanitizeAddress(input: string): string {\n  if (typeof input !== 'string') return '';\n  return input.replace(/[^\\p{L}\\p{M}0-9\\s,\\.\\-#&()\\/'’]/gu, '').trim();\n}\n\nexport function sanitizeName(input: string): string {\n  if (typeof input !== 'string') return '';\n  return input.replace(/[^\\p{L}\\p{M}\\s\\-'.]/gu, '').trim();\n}\n"
    }
  ]
}
