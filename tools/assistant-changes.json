{
  "description": "Multi-step payments: /pay (method), /pay/card, /pay/crypto + APIs, Prisma models, email notifications",
  "files": [
    {
      "path": "prisma/schema.prisma",
      "content_update": "regex",
      "updates": [
        {
          "pattern": "$",
          "replacement": "\n\n// === Added by assistant (crypto payments) ===\nmodel CryptoWallet {\n  id        String   @id @default(cuid())\n  symbol    String   // 'usdt' | 'usdc' | 'btc' | 'pi'\n  network   String   // e.g., TRC20, ERC20, BTC\n  address   String\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([symbol, isActive])\n}\n\nmodel CryptoPayment {\n  id         String   @id @default(cuid())\n  userId     String?\n  symbol     String\n  network    String\n  addressId  String?\n  address    String\n  amountDkk  Float\n  amountCoin Float\n  status     String   @default(\"pending\") // pending, confirmed, rejected\n  createdAt  DateTime @default(now())\n}\n"
        }
      ]
    },
    {
      "path": ".env.example",
      "content_update": "regex",
      "updates": [
        {
          "pattern": "$",
          "replacement": "\n\n# === Email / Admin (optional) ===\nSMTP_HOST=\nSMTP_PORT=587\nSMTP_USER=\nSMTP_PASS=\nFROM_EMAIL=\nADMIN_EMAIL=\n# === Card payments (optional) ===\nSTRIPE_PUBLISHABLE_KEY=\nSTRIPE_SECRET_KEY=\n"
        }
      ]
    },
    {
      "path": "lib/email.ts",
      "content": "import nodemailer from \"nodemailer\";\n\nexport async function sendEmail(to: string, subject: string, html: string) {\n  const host = process.env.SMTP_HOST;\n  const port = process.env.SMTP_PORT ? Number(process.env.SMTP_PORT) : 587;\n  const user = process.env.SMTP_USER;\n  const pass = process.env.SMTP_PASS;\n  const from = process.env.FROM_EMAIL || user;\n\n  if (!host || !user || !pass || !from) {\n    console.warn(\"[email] SMTP not configured. Printing email to console instead.\");\n    console.log({ to, subject, html });\n    return { ok: false, reason: \"smtp_not_configured\" };\n  }\n\n  const transporter = nodemailer.createTransport({\n    host, port, secure: port === 465,\n    auth: { user, pass }\n  });\n\n  await transporter.sendMail({ from, to, subject, html });\n  return { ok: true };\n}\n"
    },
    {
      "path": "lib/notify.ts",
      "content": "import { sendEmail } from \"./email\";\n\nexport async function notifyUserEmail(to: string, subject: string, body: string) {\n  try {\n    return await sendEmail(to, subject, body);\n  } catch (e:any) {\n    console.error(\"[notify] user email failed\", e);\n    return { ok: false, error: String(e) };\n  }\n}\n\nexport async function notifyAdmin(subject: string, body: string) {\n  const admin = process.env.ADMIN_EMAIL;\n  if (!admin) {\n    console.warn(\"[notify] ADMIN_EMAIL not set. Skipping admin email.\");\n    return { ok: false, reason: \"admin_email_not_set\" };\n  }\n  return notifyUserEmail(admin, subject, body);\n}\n"
    },
    {
      "path": "lib/validation.ts",
      "content": "import { z } from \"zod\";\n\nexport const ConfirmCryptoPaymentSchema = z.object({\n  symbol: z.enum([\"pi\",\"usdt\",\"usdc\",\"btc\"]),\n  walletId: z.string().optional(),\n  network: z.string().min(1),\n  address: z.string().min(10),\n  amountDkk: z.number().positive(),\n  amountCoin: z.number().positive(),\n  txRef: z.string().optional()\n});\n\nexport type ConfirmCryptoPaymentInput = z.infer<typeof ConfirmCryptoPaymentSchema>;\n"
    },
    {
      "path": "app/api/payments/quote/route.ts",
      "content": "import { NextResponse } from \"next/server\";\n\nconst mapSymbolToId: Record<string, string> = {\n  usdt: \"tether\",\n  usdc: \"usd-coin\",\n  btc: \"bitcoin\",\n  pi: \"pi-network\",\n};\n\nexport const revalidate = 30;\n\nexport async function GET(request: Request) {\n  const url = new URL(request.url);\n  const symbol = (url.searchParams.get(\"symbol\") || \"usdt\").toLowerCase();\n  const amountDkk = Number(url.searchParams.get(\"amount_dkk\") || \"0\");\n  if (!amountDkk || amountDkk <= 0) {\n    return NextResponse.json({ error: \"amount_dkk must be > 0\" }, { status: 400 });\n  }\n\n  const id = mapSymbolToId[symbol];\n  if (!id) {\n    return NextResponse.json({ error: \"Unsupported symbol\" }, { status: 400 });\n  }\n\n  // Fetch price in DKK for the symbol\n  let priceDkk: number | undefined;\n  if (symbol === \"pi\") {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || \"\"}/api/crypto/pi?vs=dkk`, { cache: \"no-store\" });\n    const json = await res.json();\n    priceDkk = json?.data?.dkk;\n  } else {\n    const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || \"\"}/api/crypto/tickers?ids=${id}&vs=dkk`, { cache: \"no-store\" });\n    const json = await res.json();\n    priceDkk = json?.data?.[id]?.dkk;\n  }\n\n  if (typeof priceDkk !== \"number\" || priceDkk <= 0) {\n    return NextResponse.json({ error: \"Failed to get price\" }, { status: 502 });\n  }\n\n  const amountCoin = amountDkk / priceDkk;\n  const out = {\n    symbol,\n    amountDkk,\n    priceDkk,\n    amountCoin,\n    last_updated: new Date().toISOString(),\n  };\n  return NextResponse.json(out);\n}\n"
    },
    {
      "path": "app/api/payments/wallets/route.ts",
      "content": "import { NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/db\";\n\nexport const revalidate = 10;\n\nexport async function GET(request: Request) {\n  const url = new URL(request.url);\n  const symbol = (url.searchParams.get(\"symbol\") || \"\").toLowerCase();\n  if (!symbol) {\n    return NextResponse.json({ error: \"symbol is required\" }, { status: 400 });\n  }\n  const wallets = await prisma.cryptoWallet.findMany({\n    where: { symbol, isActive: true },\n    orderBy: [{ network: \"asc\" }],\n  });\n  return NextResponse.json({ wallets });\n}\n"
    },
    {
      "path": "app/api/payments/crypto/confirm/route.ts",
      "content": "import { NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/db\";\nimport { getCurrentUser } from \"@/lib/session\";\nimport { ConfirmCryptoPaymentSchema } from \"@/lib/validation\";\nimport { notifyAdmin, notifyUserEmail } from \"@/lib/notify\";\n\nexport async function POST(request: Request) {\n  const me = await getCurrentUser();\n  if (!me) return NextResponse.json({ error: \"Unauthenticated\" }, { status: 401 });\n\n  let body: any;\n  try {\n    body = await request.json();\n  } catch {\n    return NextResponse.json({ error: \"Invalid JSON\" }, { status: 400 });\n  }\n\n  const parsed = ConfirmCryptoPaymentSchema.safeParse(body);\n  if (!parsed.success) {\n    return NextResponse.json({ error: parsed.error.flatten() }, { status: 400 });\n  }\n  const data = parsed.data;\n\n  const payment = await prisma.cryptoPayment.create({\n    data: {\n      userId: me.id,\n      symbol: data.symbol,\n      network: data.network,\n      addressId: data.walletId,\n      address: data.address,\n      amountDkk: data.amountDkk,\n      amountCoin: data.amountCoin,\n      status: \"pending\",\n    },\n  });\n\n  const userSubject = \"تم استلام طلب الدفع بالعملات الرقمية\";\n  const userBody = `\n    <div style=\"font-family:sans-serif\">\n      <h2>جاري معالجة طلبك</h2>\n      <p>شكرًا لك. تم استلام إشعار الدفع الخاص بك (${data.symbol.toUpperCase()}).</p>\n      <p>قيمة الرحلة: ${data.amountDkk} DKK • المبلغ المرسل: ${data.amountCoin} ${data.symbol.toUpperCase()}</p>\n      <p>المدة المتوقعة للمعالجة: 15 دقيقة.</p>\n      <p>رقم العملية: ${payment.id}</p>\n    </div>\n  `;\n  await notifyUserEmail(me.email, userSubject, userBody);\n\n  const adminSubject = \"Crypto payment pending\";\n  const adminBody = `\n    <div style=\"font-family:sans-serif\">\n      <h2>Payment Pending Review</h2>\n      <p>User: ${me.email}</p>\n      <p>Symbol: ${data.symbol.toUpperCase()} • Network: ${data.network}</p>\n      <p>Address: ${data.address}</p>\n      <p>Amount: ${data.amountCoin} ${data.symbol.toUpperCase()} (~ ${data.amountDkk} DKK)</p>\n      <p>Payment ID: ${payment.id}</p>\n    </div>\n  `;\n  await notifyAdmin(adminSubject, adminBody);\n\n  return NextResponse.json({ ok: true, id: payment.id });\n}\n"
    },
    {
      "path": "app/api/payments/card/mock-confirm/route.ts",
      "content": "import { NextResponse } from \"next/server\";\nimport { getCurrentUser } from \"@/lib/session\";\nimport { notifyAdmin, notifyUserEmail } from \"@/lib/notify\";\n\nexport async function POST(request: Request) {\n  const me = await getCurrentUser();\n  if (!me) return NextResponse.json({ error: \"Unauthenticated\" }, { status: 401 });\n\n  let body:any = {};\n  try { body = await request.json(); } catch {}\n\n  const amountDkk = Number(body.amountDkk || 0);\n  if (!amountDkk || amountDkk <= 0) {\n    return NextResponse.json({ error: \"amountDkk must be > 0\" }, { status: 400 });\n  }\n\n  const userSubject = \"تم استلام دفعتك بالبطاقة (محاكاة)\";\n  const userBody = `\n    <div style=\"font-family:sans-serif\">\n      <h2>تم الدفع</h2>\n      <p>شكرًا لك. تم استلام دفعتك بقيمة ${amountDkk} DKK.</p>\n      <p>تم حجز الرحلة وبانتظار التأكيد وإرسال السيارة خلال 5 دقائق.</p>\n    </div>\n  `;\n  await notifyUserEmail(me.email, userSubject, userBody);\n\n  const adminSubject = \"Card payment received (mock)\";\n  const adminBody = `\n    <div style=\"font-family:sans-serif\">\n      <h2>Card Payment (Mock)</h2>\n      <p>User: ${me.email}</p>\n      <p>Amount: ${amountDkk} DKK</p>\n    </div>\n  `;\n  await notifyAdmin(adminSubject, adminBody);\n\n  return NextResponse.json({ ok: true });\n}\n"
    },
    {
      "path": "app/pay/page.tsx",
      "content": "\"use client\";\nimport Link from \"next/link\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { useState } from \"react\";\n\nexport default function PayIndex(){\n  const router = useRouter();\n  const sp = useSearchParams();\n  const amount = sp.get(\"amount_dkk\") || \"\";\n\n  const [method, setMethod] = useState<\"card\"|\"crypto\"|null>(null);\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 grid gap-6\">\n      <h1 className=\"text-2xl font-bold\">Choose Payment Method</h1>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <button onClick={()=>setMethod(\"card\")} className={`rounded-2xl border p-6 text-left ${method===\"card\"?\"ring-2 ring-blue-500\":\"\"}`}>\n          <div className=\"text-lg font-semibold\">Pay by Card</div>\n          <div className=\"text-sm text-gray-500 mt-1\">Visa / Mastercard</div>\n        </button>\n        <button onClick={()=>setMethod(\"crypto\")} className={`rounded-2xl border p-6 text-left ${method===\"crypto\"?\"ring-2 ring-blue-500\":\"\"}`}>\n          <div className=\"text-lg font-semibold\">Pay with Crypto</div>\n          <div className=\"text-sm text-gray-500 mt-1\">USDT / USDC / BTC / PI</div>\n        </button>\n      </div>\n\n      <div className=\"flex gap-3\">\n        <button\n          disabled={!method}\n          onClick={() => {\n            if (!method) return;\n            const q = amount ? `?amount_dkk=${encodeURIComponent(amount)}` : \"\";\n            router.push(`/pay/${method}${q}`);\n          }}\n          className=\"px-4 py-2 rounded-xl border bg-black text-white disabled:opacity-40\"\n        >\n          Continue\n        </button>\n        <input\n          type=\"number\"\n          placeholder=\"Ride price (DKK)\"\n          defaultValue={amount}\n          onChange={(e)=>{\n            const v = e.currentTarget.value;\n            const q = v ? `?amount_dkk=${encodeURIComponent(v)}` : \"\";\n            window.history.replaceState(null, \"\", `/pay${q}`);\n          }}\n          className=\"rounded-xl border px-3 py-2\"\n        />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "app/pay/card/page.tsx",
      "content": "\"use client\";\nimport { useState } from \"react\";\n\nexport default function PayByCard(){\n  const [amount, setAmount] = useState<string>(\"\");\n  const stripeKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || \"\";\n\n  async function mockConfirm(){\n    const res = await fetch(\"/api/payments/card/mock-confirm\", {\n      method: \"POST\",\n      headers: {\"Content-Type\":\"application/json\"},\n      body: JSON.stringify({ amountDkk: Number(amount) || 0 })\n    });\n    if (!res.ok) {\n      alert(await res.text());\n      return;\n    }\n    alert(\"تم استلام دفعتك (محاكاة). سيتم تأكيد الحجز خلال 5 دقائق.\");\n  }\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 grid gap-6\">\n      <h1 className=\"text-2xl font-bold\">Pay by Card</h1>\n\n      {!stripeKey && (\n        <div className=\"p-4 rounded-xl border bg-yellow-50 text-yellow-900\">\n          <div className=\"font-semibold\">Stripe غير مفعّل</div>\n          <div className=\"text-sm mt-1\">أضف مفاتيح Stripe إلى <code>.env</code> لتفعيل الدفع الحقيقي.</div>\n        </div>\n      )}\n\n      <label className=\"grid gap-1\">\n        <span className=\"text-sm text-gray-500\">Amount (DKK)</span>\n        <input value={amount} onChange={e=>setAmount(e.target.value)} type=\"number\" className=\"rounded-xl border px-3 py-2\" />\n      </label>\n\n      <div className=\"flex gap-3\">\n        <button className=\"px-4 py-2 rounded-xl border bg-black text-white\" onClick={mockConfirm}>\n          محاكاة الدفع الآن\n        </button>\n      </div>\n\n      <div className=\"text-sm text-gray-500\">\n        ملاحظة: هذه صفحة محاكاة. عند تفعيل Stripe/QuickPay سنستبدل هذا النموذج بواجهة الدفع الحقيقية.\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "app/pay/crypto/page.tsx",
      "content": "\"use client\";\nimport { useEffect, useMemo, useState } from \"react\";\n\ntype Wallet = { id: string; symbol: string; network: string; address: string; isActive: boolean };\n\nconst symbols = [\n  { id: \"usdt\", label: \"USDT\" },\n  { id: \"usdc\", label: \"USDC\" },\n  { id: \"btc\",  label: \"BTC\"  },\n  { id: \"pi\",   label: \"PI\"   },\n];\n\nexport default function PayWithCrypto(){\n  const [amountDkk, setAmountDkk] = useState<string>(\"\");\n  const [symbol, setSymbol] = useState<string>(\"usdt\");\n  const [wallets, setWallets] = useState<Wallet[]>([]);\n  const [selectedWallet, setSelectedWallet] = useState<Wallet | null>(null);\n  const [quote, setQuote] = useState<{amountDkk:number; amountCoin:number; priceDkk:number; last_updated:string} | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(()=>{\n    (async()=>{\n      const r = await fetch(`/api/payments/wallets?symbol=${symbol}`);\n      const j = await r.json();\n      setWallets(j.wallets || []);\n      setSelectedWallet(null);\n    })();\n  }, [symbol]);\n\n  useEffect(()=>{\n    const amt = Number(amountDkk || \"0\");\n    if (amt>0) {\n      (async()=>{\n        const r = await fetch(`/api/payments/quote?symbol=${symbol}&amount_dkk=${amt}`, { cache: \"no-store\" });\n        const j = await r.json();\n        if (r.ok) setQuote(j);\n        else setQuote(null);\n      })();\n    } else {\n      setQuote(null);\n    }\n  }, [symbol, amountDkk]);\n\n  async function onConfirm(){\n    if (!selectedWallet || !quote) return;\n    setSubmitting(true);\n    try{\n      const res = await fetch(\"/api/payments/crypto/confirm\", {\n        method: \"POST\",\n        headers: {\"Content-Type\":\"application/json\"},\n        body: JSON.stringify({\n          symbol,\n          walletId: selectedWallet.id,\n          network: selectedWallet.network,\n          address: selectedWallet.address,\n          amountDkk: quote.amountDkk,\n          amountCoin: quote.amountCoin\n        })\n      });\n      if (!res.ok){\n        alert(await res.text()); return;\n      }\n      alert(\"تم استلام إشعار الدفع. سيتم المعالجة خلال ~15 دقيقة.\");\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-6 grid gap-6\">\n      <h1 className=\"text-2xl font-bold\">Pay with Crypto</h1>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <label className=\"grid gap-1\">\n          <span className=\"text-sm text-gray-500\">Ride price (DKK)</span>\n          <input value={amountDkk} onChange={e=>setAmountDkk(e.target.value)} type=\"number\" className=\"rounded-xl border px-3 py-2\" placeholder=\"e.g. 250\" />\n        </label>\n        <label className=\"grid gap-1\">\n          <span className=\"text-sm text-gray-500\">Currency</span>\n          <select value={symbol} onChange={e=>setSymbol(e.target.value)} className=\"rounded-xl border px-3 py-2\">\n            {symbols.map(s=>(<option key={s.id} value={s.id}>{s.label}</option>))}\n          </select>\n        </label>\n      </div>\n\n      {quote && (\n        <div className=\"rounded-2xl border p-4 grid md:grid-cols-3 gap-4\">\n          <div><div className=\"text-sm text-gray-500\">Amount (DKK)</div><div className=\"text-xl font-semibold\">{quote.amountDkk} kr</div></div>\n          <div><div className=\"text-sm text-gray-500\">Price</div><div className=\"text-xl font-semibold\">{quote.amountCoin.toFixed(8)} {symbol.toUpperCase()}</div></div>\n          <div><div className=\"text-sm text-gray-500\">Last Updated</div><div className=\"text-sm\">{new Date(quote.last_updated).toLocaleString()}</div></div>\n        </div>\n      )}\n\n      <div className=\"grid gap-2\">\n        <div className=\"text-sm text-gray-500\">Choose network & copy the wallet address:</div>\n        <div className=\"grid md:grid-cols-2 gap-3\">\n          {wallets.map(w => (\n            <button key={w.id} onClick={()=>setSelectedWallet(w)}\n              className={`rounded-2xl border p-4 text-left ${selectedWallet?.id===w.id?\"ring-2 ring-blue-500\":\"\"}`}>\n              <div className=\"text-sm text-gray-500\">{w.network}</div>\n              <div className=\"font-mono break-all\">{w.address}</div>\n            </button>\n          ))}\n          {!wallets.length && <div className=\"text-sm text-gray-500\">No wallets configured yet for {symbol.toUpperCase()}.</div>}\n        </div>\n      </div>\n\n      <div className=\"flex gap-3\">\n        <button disabled={!selectedWallet || !quote || submitting} onClick={onConfirm}\n          className=\"px-4 py-2 rounded-xl border bg-black text-white disabled:opacity-40\">\n          تم تحويل العملات الرقمية\n        </button>\n      </div>\n\n      <div className=\"text-sm text-gray-500\">\n        بعد التحويل، اضغط الزر بالأعلى. سنرسل لك بريدًا بأن طلبك قيد المعالجة (حوالي 15 دقيقة)، وسنخطر الأدمن أيضًا.\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "package.json",
      "content_update": "merge",
      "content": {
        "dependencies": {
          "zod": "^3.23.8",
          "nodemailer": "^6.9.13"
        },
        "scripts": {
          "db:migrate": "prisma migrate dev -n crypto-payments"
        }
      }
    },
    {
      "path": "app/DEV_NOTES__assistant.md",
      "content_update": "regex",
      "updates": [
        {
          "pattern": "$",
          "replacement": "\n[2025-10-23 07:54:02] Multi-step payments scaffolded:\n- Pages: /pay, /pay/card, /pay/crypto\n- APIs: /api/payments/quote, /api/payments/wallets, /api/payments/crypto/confirm, /api/payments/card/mock-confirm\n- Prisma models: CryptoWallet, CryptoPayment (run `npm run db:migrate`)\n- Emails via SMTP (nodemailer). Fallback to console if not configured.\n"
        }
      ]
    }
  ]
}